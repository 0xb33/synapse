import socket
from typing import Optional
from .interfaces import IAddress

class BindError(Exception): ...

class CannotListenError(BindError):
    def __init__(self, interface: str, port: int, socketError: socket.error): ...

class MulticastJoinError(Exception): ...
class MessageLengthError(Exception): ...
class DNSLookupError(IOError): ...
class ConnectInProgressError(Exception): ...

class ConnectError(Exception):
    def __init__(self, osError=None, string=""): ...

class ConnectBindError(ConnectError): ...
class UnknownHostError(ConnectError): ...
class NoRouteError(ConnectError): ...
class ConnectionRefusedError(ConnectError): ...
class TCPTimedOutError(ConnectError): ...
class BadFileError(ConnectError): ...
class ServiceNameUnknownError(ConnectError): ...
class UserError(ConnectError): ...
class TimeoutError(UserError): ...
class SSLError(ConnectError): ...
class VerifyError(Exception): ...
class PeerVerifyError(VerifyError): ...
class CertificateError(Exception): ...

errnoMapping: dict

def getConnectError(e) -> Exception: ...

class ConnectionClosed(Exception): ...
class ConnectionLost(ConnectionClosed): ...
class ConnectionAborted(ConnectionLost): ...
class ConnectionDone(ConnectionClosed): ...
class FileDescriptorOverrun(ConnectionLost): ...
class ConnectionFdescWentAway(ConnectionLost): ...
class AlreadyCalled(ValueError): ...
class AlreadyCancelled(ValueError): ...

class ProcessDone(ConnectionDone):
    def __init__(self, status): ...

class ProcessTerminated(ConnectionLost):
    def __init__(
        self,
        exitCode: Optional[int] = None,
        signal: Optional[int] = None,
        status: Optional[int] = None,
    ): ...

class ProcessExitedAlready(Exception): ...
class NotConnectingError(RuntimeError): ...
class NotListeningError(RuntimeError): ...
class ReactorNotRunning(RuntimeError): ...
class ReactorNotRestartable(RuntimeError): ...
class ReactorAlreadyRunning(RuntimeError): ...
class ReactorAlreadyInstalledError(AssertionError): ...

class ConnectingCancelledError(Exception):
    def __init__(self, address: IAddress): ...

class NoProtocol(Exception): ...
class UnsupportedAddressFamily(Exception): ...
class UnsupportedSocketType(Exception): ...
class AlreadyListened(Exception): ...

class InvalidAddressError(ValueError):
    def __init__(self, address: bytes, message: str): ...
